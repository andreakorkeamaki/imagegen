'use client';

import React from 'react';

interface ImageDisplayProps {
  imageUrl: string | null;
  isLoading: boolean;
  error: string | null;
  prompt?: string; // Optional: Pass prompt for alt text
}

const ImageDisplay: React.FC<ImageDisplayProps> = ({ imageUrl, isLoading, error, prompt }) => {
  return (
    <div className="aspect-square w-full bg-gray-100 rounded-lg flex items-center justify-center relative overflow-hidden shadow-inner min-h-[300px] md:min-h-[400px] lg:min-h-[512px]">
      {isLoading && (
        <div className="absolute inset-0 flex flex-col items-center justify-center bg-gray-400 bg-opacity-50 z-10">
          <svg className="animate-spin h-10 w-10 text-indigo-600 mb-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p className="text-indigo-700 font-medium">Generating Image...</p>
          {/* Add real-time progress here if available from API */}
        </div>
      )}
      {error && (
        <div className="absolute inset-0 flex items-center justify-center bg-red-100 p-4 z-10">
          <p className="text-red-600 text-center font-medium">Error: {error}</p>
        </div>
      )}
      {imageUrl && !isLoading && (
        <img
          src={imageUrl}
          alt={prompt || 'Generated by AI'}
          className="object-contain w-full h-full"
          // Add onLoad/onError handlers if needed for better UX
        />
      )}
      {!imageUrl && !isLoading && !error && (
        <p className="text-gray-400 text-center px-4">Your generated image will appear here.</p>
      )}
    </div>
  );
};

export default ImageDisplay;
